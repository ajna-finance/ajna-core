// SPDX-License-Identifier: UNLICENSED

pragma solidity 0.8.14;

import { PositionsInvariants } from "../../invariants/PositionsAndRewards/PositionsInvariants.t.sol";

contract RegressionPositionManager is PositionsInvariants { 

    function setUp() public override { 
        super.setUp();
    }
    
    function test_regression_position_evm_revert_1() external {
        _positionsHandler.memorializePositions(265065747026302585864021010218, 462486804883131506688620136159543, 43470270713791727776, 115792089237316195423570985008687907853269984665640564039457584007913129639932);
    }

    function test_regression_position_evm_revert_2() external {
        _positionsHandler.burn(3492, 4670, 248, 9615);
    }

    function test_regression_position_moveLiquidity_assertions() external {
        _positionsHandler.redeemPositions(3, 115792089237316195423570985008687907853269984665640564039457584007913129639933, 383, 55401367687647196204681805934009816110);
        _positionsHandler.memorializePositions(63114273171442586497890388, 154152435409657628166549200091090874517100159073873, 115792089237316195423570985008687907853269984665640564039457584007913129639933, 115792089237316195423570985008687907853269984665640564039457584007913129639935);
        _positionsHandler.memorializePositions(5108, 999999999999999999, 18382, 12291);
        _positionsHandler.burn(138176025109205882910260935173830393, 486526542428702931007164500131103382164, 909564196488498523878255414236, 25516699);
        _positionsHandler.moveLiquidity(0, 115792089237316195423570985008687907853269984665640564039457584007913129639933, 0, 3, 2);
    }

    // example has a divergence of the positionManager's depositTime from the actor tokenId's depositTime stored in positionManager
    function test_regression_position_deposittime_assertions() external {
        _positionsHandler.burn(2361, 11336, 3859341707, 3646975496);
        _positionsHandler.mint(68692219213121667537675943993034658256534085966823702, 312562089476538195);
        _positionsHandler.redeemPositions(14346285029390138384631699352851716037838873523252820863546, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639935, 156099301165664793782770725300034911992745565612292730719535759193816917);
        _positionsHandler.failed();
        _positionsHandler.moveLiquidity(3124, 4851, 22482, 489, 12560);
        _positionsHandler.failed();
        _positionsHandler.failed();
        _positionsHandler.redeemPositions(12847, 1716, 21792638192227207103739660380579104546232133259664619746653999669489792464176, 6416);
        _positionsHandler.failed();
        _positionsHandler.mint(1, 1);
        _positionsHandler.burn(429855229349693967633032639264591, 115792089237316195423570985008687907853269984665640564039457584007913129639933, 0, 16061636408720604028163146864844242179959313271462038759);
        _positionsHandler.memorializePositions(1000000000000000000000000000, 2339, 9277, 2979);
        _positionsHandler.failed();
        _positionsHandler.moveLiquidity(1126936726725513634974948946146229558794440522269778954941252072750, 28213197928202789385986111147974297715344406983, 0, 1078163238702153671724735140934660154334823619509725521693, 115792089237316195423570985008687907853269984665640564039457584007913129639933);
        _positionsHandler.memorializePositions(218844288525098671251665, 1, 0, 115792089237316195423570985008687907853269984665640564039457584007913129639934);
        _positionsHandler.burn(7059, 6750, 15855, 2093);
        _positionsHandler.redeemPositions(18729, 617, 21015, 14643);
        _positionsHandler.moveLiquidity(558, 0, 11493693556659833093547598989650493235947229407, 115792089237316195423570985008687907853269984665640564039457584007913129639934, 21934937701560087003712);
        _positionsHandler.mint(1135715274316739321105, 23206);
        _positionsHandler.redeemPositions(15334, 3730, 31354931781638678607228669297131712859107492772550336241160036866987736981860, 2012);

        invariant_positions_PM1_PM2();
    }


    // assertion check on depositTime -> positionManager takes on larger of the two depositTime's (it's current DT and the incoming pos DT)
    function test_regression_position_assertions() external {
        
        _positionsHandler.redeemPositions(14305804179334726329087114711985529806684597589133, 115792089237316195423570985008687907853269984665640564039457584007913129639933, 3, 115792089237316195423570985008687907853269984665640564039457584007913129639935);
        _positionsHandler.redeemPositions(15796477295184955704374920720797, 8371624407570958028199016842329852681, 415665569658864472013466984364553963913525434423794529513837676955108, 115792089237316195423570985008687907853269984665640564039457584007913129639934);
        _positionsHandler.burn(1, 0, 21220, 115792089237316195423570985008687907853269984665640564039457584007913129639933);
        _positionsHandler.redeemPositions(23121, 7032, 1209600, 56750200883517406918163409362901600125139979314138135292026435586444244246336);
        _positionsHandler.mint(17499, 10155);
        _positionsHandler.moveLiquidity(4204702690764076468, 49830487004238111081, 3, 8687554674969877, 34664948256017662264545053667706057584168120838401342);
        _positionsHandler.burn(115792089237316195423570985008687907853269984665640564039457584007913129639932, 115792089237316195423570985008687907853269984665640564039457584007913129639933, 25655664119351, 378440596);
        _positionsHandler.burn(9170, 9504, 11036, 7293);
        _positionsHandler.memorializePositions(51818345872077820903041, 8835932826797125445564909432711163860901660866650218491158279446532175, 0, 43692);
        _positionsHandler.moveLiquidity(3233, 18341, 1300, 20191, 9673);

        invariant_positions_PM1_PM2();
    }
}