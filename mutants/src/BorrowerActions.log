*** UNIVERSALMUTATOR ***
MUTATING WITH RULES: universal.rules, solidity.rules, c_like.rules
SKIPPED 72 MUTANTS ONLY CHANGING STRING LITERALS
4137 MUTANTS GENERATED BY RULES
PROCESSING MUTANT: 47:         bool    borrow;                // true if borrow action  ==>          bool    borrow;                // false if borrow action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.0.sol] 
PROCESSING MUTANT: 47:         bool    borrow;                // true if borrow action  ==>          bool    borrow;                //  if borrow action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.1.sol] 
PROCESSING MUTANT: 48:         uint256 borrowerDebt;          // [WAD] borrower's accrued debt  ==>          uint256 borrowerDebt;          //  borrower's accrued debt...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.2.sol] 
PROCESSING MUTANT: 49:         uint256 compensatedCollateral; // [WAD] amount of borrower collateral that is compensated with LPs (NFTs only)  ==>          uint256 compensatedCollateral; //  amount of borrower collateral that is compensated with LPs (NFTs only)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.3.sol] 
PROCESSING MUTANT: 50:         uint256 t0BorrowAmount;        // [WAD] t0 amount to borrow  ==>          uint256 t0BorrowAmount;        // [WAD] t1 amount to borrow...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.4.sol] 
PROCESSING MUTANT: 50:         uint256 t0BorrowAmount;        // [WAD] t0 amount to borrow  ==>          uint256 t0BorrowAmount;        // [WAD] t-1 amount to borrow...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.5.sol] 
PROCESSING MUTANT: 50:         uint256 t0BorrowAmount;        // [WAD] t0 amount to borrow  ==>          uint256 t0BorrowAmount;        // [WAD] t(0+1) amount to borrow...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.6.sol] 
PROCESSING MUTANT: 50:         uint256 t0BorrowAmount;        // [WAD] t0 amount to borrow  ==>          uint256 t0BorrowAmount;        // [WAD] t(0-1) amount to borrow...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.7.sol] 
PROCESSING MUTANT: 50:         uint256 t0BorrowAmount;        // [WAD] t0 amount to borrow  ==>          uint256 t0BorrowAmount;        //  t0 amount to borrow...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.8.sol] 
PROCESSING MUTANT: 51:         uint256 t0DebtChange;          // [WAD] additional t0 debt resulted from draw debt action  ==>          uint256 t0DebtChange;          // [WAD] additional t1 debt resulted from draw debt action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.9.sol] 
PROCESSING MUTANT: 51:         uint256 t0DebtChange;          // [WAD] additional t0 debt resulted from draw debt action  ==>          uint256 t0DebtChange;          // [WAD] additional t-1 debt resulted from draw debt action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.10.sol] 
PROCESSING MUTANT: 51:         uint256 t0DebtChange;          // [WAD] additional t0 debt resulted from draw debt action  ==>          uint256 t0DebtChange;          // [WAD] additional t(0+1) debt resulted from draw debt action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.11.sol] 
PROCESSING MUTANT: 51:         uint256 t0DebtChange;          // [WAD] additional t0 debt resulted from draw debt action  ==>          uint256 t0DebtChange;          // [WAD] additional t(0-1) debt resulted from draw debt action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.12.sol] 
PROCESSING MUTANT: 51:         uint256 t0DebtChange;          // [WAD] additional t0 debt resulted from draw debt action  ==>          uint256 t0DebtChange;          //  additional t0 debt resulted from draw debt action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.13.sol] 
PROCESSING MUTANT: 52:         bool    inAuction;             // true if loan is auctioned  ==>          bool    inAuction;             // false if loan is auctioned...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.14.sol] 
PROCESSING MUTANT: 52:         bool    inAuction;             // true if loan is auctioned  ==>          bool    inAuction;             //  if loan is auctioned...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.15.sol] 
PROCESSING MUTANT: 53:         bool    pledge;                // true if pledge action  ==>          bool    pledge;                // false if pledge action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.16.sol] 
PROCESSING MUTANT: 53:         bool    pledge;                // true if pledge action  ==>          bool    pledge;                //  if pledge action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.17.sol] 
PROCESSING MUTANT: 54:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)  ==>          bool    stampT0Np;             // true if loan's t1 neutral price should be restamped (when drawing debt or pledge settles auction)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.18.sol] 
PROCESSING MUTANT: 54:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)  ==>          bool    stampT0Np;             // true if loan's t-1 neutral price should be restamped (when drawing debt or pledge settles auction)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.19.sol] 
PROCESSING MUTANT: 54:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)  ==>          bool    stampT0Np;             // true if loan's t(0+1) neutral price should be restamped (when drawing debt or pledge settles auction)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.20.sol] 
PROCESSING MUTANT: 54:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)  ==>          bool    stampT0Np;             // true if loan's t(0-1) neutral price should be restamped (when drawing debt or pledge settles auction)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.21.sol] 
PROCESSING MUTANT: 54:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)  ==>          bool    stampT0Np;             // false if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.22.sol] 
PROCESSING MUTANT: 54:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)  ==>          bool    stampT0Np;             //  if loan's t0 neutral price should be restamped (when drawing debt or pledge settles auction)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.23.sol] 
PROCESSING MUTANT: 57:         uint256 borrowerDebt;          // [WAD] borrower's accrued debt  ==>          uint256 borrowerDebt;          //  borrower's accrued debt...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.24.sol] 
PROCESSING MUTANT: 58:         uint256 compensatedCollateral; // [WAD] amount of borrower collateral that is compensated with LPs (NFTs only)  ==>          uint256 compensatedCollateral; //  amount of borrower collateral that is compensated with LPs (NFTs only)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.25.sol] 
PROCESSING MUTANT: 59:         bool    inAuction;             // true if loan still in auction after repay, false otherwise  ==>          bool    inAuction;             // false if loan still in auction after repay, false otherwise...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.26.sol] 
PROCESSING MUTANT: 59:         bool    inAuction;             // true if loan still in auction after repay, false otherwise  ==>          bool    inAuction;             // true if loan still in auction after repay, true otherwise...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.27.sol] 
PROCESSING MUTANT: 59:         bool    inAuction;             // true if loan still in auction after repay, false otherwise  ==>          bool    inAuction;             //  if loan still in auction after repay, false otherwise...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.28.sol] 
PROCESSING MUTANT: 60:         bool    pull;                  // true if pull action  ==>          bool    pull;                  // false if pull action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.29.sol] 
PROCESSING MUTANT: 60:         bool    pull;                  // true if pull action  ==>          bool    pull;                  //  if pull action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.30.sol] 
PROCESSING MUTANT: 61:         bool    repay;                 // true if repay action  ==>          bool    repay;                 // false if repay action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.31.sol] 
PROCESSING MUTANT: 61:         bool    repay;                 // true if repay action  ==>          bool    repay;                 //  if repay action...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.32.sol] 
PROCESSING MUTANT: 62:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)  ==>          bool    stampT0Np;             // true if loan's t1 neutral price should be restamped (when repay settles auction or pull collateral)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.33.sol] 
PROCESSING MUTANT: 62:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)  ==>          bool    stampT0Np;             // true if loan's t-1 neutral price should be restamped (when repay settles auction or pull collateral)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.34.sol] 
PROCESSING MUTANT: 62:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)  ==>          bool    stampT0Np;             // true if loan's t(0+1) neutral price should be restamped (when repay settles auction or pull collateral)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.35.sol] 
PROCESSING MUTANT: 62:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)  ==>          bool    stampT0Np;             // true if loan's t(0-1) neutral price should be restamped (when repay settles auction or pull collateral)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.36.sol] 
PROCESSING MUTANT: 62:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)  ==>          bool    stampT0Np;             // false if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.37.sol] 
PROCESSING MUTANT: 62:         bool    stampT0Np;             // true if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)  ==>          bool    stampT0Np;             //  if loan's t0 neutral price should be restamped (when repay settles auction or pull collateral)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.38.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          uint256 t1DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.39.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          uint256 t0DebtInAuctionChange; // [WAD] t1 change amount of debt after repayment...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.40.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          uint256 t0DebtInAuctionChange; // [WAD] t-1 change amount of debt after repayment...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.41.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          uint256 t0DebtInAuctionChange; // [WAD] t(0+1) change amount of debt after repayment...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.42.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          uint256 t0DebtInAuctionChange; // [WAD] t(0-1) change amount of debt after repayment...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.43.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          int256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.44.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          uint256 t0DebtInAuctionChange; //  t0 change amount of debt after repayment...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.45.sol] 
PROCESSING MUTANT: 63:         uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment  ==>          /*uint256 t0DebtInAuctionChange; // [WAD] t0 change amount of debt after repayment*/...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.46.sol] 
PROCESSING MUTANT: 64:         uint256 t0RepaidDebt;          // [WAD] t0 debt repaid  ==>          uint256 t0RepaidDebt;          // [WAD] t1 debt repaid...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.47.sol] 
PROCESSING MUTANT: 64:         uint256 t0RepaidDebt;          // [WAD] t0 debt repaid  ==>          uint256 t0RepaidDebt;          // [WAD] t-1 debt repaid...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.48.sol] 
PROCESSING MUTANT: 64:         uint256 t0RepaidDebt;          // [WAD] t0 debt repaid  ==>          uint256 t0RepaidDebt;          // [WAD] t(0+1) debt repaid...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.49.sol] 
PROCESSING MUTANT: 64:         uint256 t0RepaidDebt;          // [WAD] t0 debt repaid  ==>          uint256 t0RepaidDebt;          // [WAD] t(0-1) debt repaid...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.50.sol] 
PROCESSING MUTANT: 64:         uint256 t0RepaidDebt;          // [WAD] t0 debt repaid  ==>          uint256 t0RepaidDebt;          //  t0 debt repaid...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.51.sol] 
PROCESSING MUTANT: 84:     error LimitIndexExceeded();  ==>      /*error LimitIndexExceeded();*/...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.52.sol] 
PROCESSING MUTANT: 129:         vars.pledge = collateralToPledge_ != 0;  ==>          vars.pledge = collateralToPledge_ > 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.53.sol] 
PROCESSING MUTANT: 130:         vars.borrow = amountToBorrow_ != 0;  ==>          vars.borrow = amountToBorrow_ > 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.54.sol] 
PROCESSING MUTANT: 135:         Borrower memory borrower = loans_.borrowers[borrowerAddress_];  ==>          Borrower storage borrower = loans_.borrowers[borrowerAddress_];...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.55.sol] 
PROCESSING MUTANT: 137:         vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);  ==>          vars.borrowerDebt = Maths.wmul( poolState_.inflator,borrower.t0Debt);...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.56.sol] 
PROCESSING MUTANT: 137:         vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);  ==>          /*vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);*/...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.57.sol] 
PROCESSING MUTANT: 145:         result_.remainingCollateral = borrower.collateral;  ==>          /*result_.remainingCollateral = borrower.collateral;*/...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.58.sol] 
PROCESSING MUTANT: 147:         if (vars.pledge) {  ==>          if (true) {...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.59.sol] 
PROCESSING MUTANT: 147:         if (vars.pledge) {  ==>          if (1==1) {...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.60.sol] 
PROCESSING MUTANT: 151:             result_.remainingCollateral += collateralToPledge_;  ==>              result_.remainingCollateral *= collateralToPledge_;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.61.sol] 
PROCESSING MUTANT: 151:             result_.remainingCollateral += collateralToPledge_;  ==>              result_.remainingCollateral /= collateralToPledge_;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.62.sol] 
PROCESSING MUTANT: 151:             result_.remainingCollateral += collateralToPledge_;  ==>              result_.remainingCollateral %= collateralToPledge_;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.63.sol] 
PROCESSING MUTANT: 151:             result_.remainingCollateral += collateralToPledge_;  ==>              result_.remainingCollateral += ...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.64.sol] 
PROCESSING MUTANT: 151:             result_.remainingCollateral += collateralToPledge_;  ==>              /*result_.remainingCollateral += collateralToPledge_;*/...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.65.sol] 
PROCESSING MUTANT: 157:                 _isCollateralized(vars.borrowerDebt, borrower.collateral, result_.newLup, poolState_.poolType)  ==>                  _isCollateralized( borrower.collateral,vars.borrowerDebt, result_.newLup, poolState_.poolType)...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.66.sol] 
PROCESSING MUTANT: 161:                 vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                  vars.stampT0Np = true;  // stamp borrower t1Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.67.sol] 
PROCESSING MUTANT: 161:                 vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                  vars.stampT0Np = true;  // stamp borrower t-1Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.68.sol] 
PROCESSING MUTANT: 161:                 vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                  vars.stampT0Np = true;  // stamp borrower t(0+1)Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.69.sol] 
PROCESSING MUTANT: 161:                 vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                  vars.stampT0Np = true;  // stamp borrower t(0-1)Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.70.sol] 
PROCESSING MUTANT: 161:                 vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                  vars.stampT0Np =   // stamp borrower t0Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.71.sol] 
PROCESSING MUTANT: 161:                 vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                  vars.stampT0Np = true;  //  borrower t0Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.72.sol] 
PROCESSING MUTANT: 191:             if (borrowerAddress_ != msg.sender) revert BorrowerNotSender();  ==>              if (borrowerAddress_ > msg.sender) revert BorrowerNotSender();...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.73.sol] 
PROCESSING MUTANT: 203:             vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);  ==>              vars.borrowerDebt = Maths.wmul( poolState_.inflator,borrower.t0Debt);...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.74.sol] 
PROCESSING MUTANT: 215:             result_.poolDebt   = Maths.wmul(result_.t0PoolDebt, poolState_.inflator);  ==>              result_.poolDebt   = Maths.wmul( poolState_.inflator,result_.t0PoolDebt);...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.75.sol] 
PROCESSING MUTANT: 289:         vars.repay = maxQuoteTokenAmountToRepay_ != 0;  ==>          vars.repay = maxQuoteTokenAmountToRepay_ > 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.76.sol] 
PROCESSING MUTANT: 290:         vars.pull  = collateralAmountToPull_     != 0;  ==>          vars.pull  = collateralAmountToPull_     > 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.77.sol] 
PROCESSING MUTANT: 295:         Borrower memory borrower = loans_.borrowers[borrowerAddress_];  ==>          Borrower storage borrower = loans_.borrowers[borrowerAddress_];...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.78.sol] 
PROCESSING MUTANT: 297:         vars.borrowerDebt = Maths.wmul(borrower.t0Debt, poolState_.inflator);  ==>          vars.borrowerDebt = Maths.wmul( poolState_.inflator,borrower.t0Debt);...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.79.sol] 
PROCESSING MUTANT: 305:         result_.remainingCollateral = borrower.collateral;  ==>          /*result_.remainingCollateral = borrower.collateral;*/...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.80.sol] 
PROCESSING MUTANT: 308:             if (borrower.t0Debt == 0) revert NoDebt();  ==>              if (borrower.t0Debt <= 0) revert NoDebt();...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.81.sol] 
PROCESSING MUTANT: 310:             if (maxQuoteTokenAmountToRepay_ == type(uint256).max) {  ==>              if (maxQuoteTokenAmountToRepay_ >= type(uint256).max) {...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.82.sol] 
PROCESSING MUTANT: 320:             result_.poolDebt          = Maths.wmul(result_.t0PoolDebt, poolState_.inflator);  ==>              result_.poolDebt          = Maths.wmul( poolState_.inflator,result_.t0PoolDebt);...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.83.sol] 
PROCESSING MUTANT: 321:             result_.quoteTokenToRepay = Maths.wmul(vars.t0RepaidDebt,  poolState_.inflator);  ==>              result_.quoteTokenToRepay = Maths.wmul(  poolState_.inflator,vars.t0RepaidDebt);...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.84.sol] 
PROCESSING MUTANT: 323:             vars.borrowerDebt = Maths.wmul(borrower.t0Debt - vars.t0RepaidDebt, poolState_.inflator);  ==>              vars.borrowerDebt = Maths.wmul( poolState_.inflator,borrower.t0Debt - vars.t0RepaidDebt);...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.85.sol] 
PROCESSING MUTANT: 337:                 if (_isCollateralized(vars.borrowerDebt, borrower.collateral, result_.newLup, poolState_.poolType)) {  ==>                  if (_isCollateralized(vars.borrowerDebt, result_.newLup, borrower.collateral, poolState_.poolType)) {...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.86.sol] 
PROCESSING MUTANT: 340:                     vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                      vars.stampT0Np = true;  // stamp borrower t1Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.87.sol] 
PROCESSING MUTANT: 340:                     vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                      vars.stampT0Np = true;  // stamp borrower t-1Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.88.sol] 
PROCESSING MUTANT: 340:                     vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                      vars.stampT0Np = true;  // stamp borrower t(0+1)Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.89.sol] 
PROCESSING MUTANT: 340:                     vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                      vars.stampT0Np = true;  // stamp borrower t(0-1)Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.90.sol] 
PROCESSING MUTANT: 340:                     vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                      vars.stampT0Np =   // stamp borrower t0Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.91.sol] 
PROCESSING MUTANT: 340:                     vars.stampT0Np = true;  // stamp borrower t0Np when exiting from auction  ==>                      vars.stampT0Np = true;  //  borrower t0Np when exiting from auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.92.sol] 
PROCESSING MUTANT: 373:             if (borrowerAddress_ != msg.sender) revert BorrowerNotSender();  ==>              if (borrowerAddress_ > msg.sender) revert BorrowerNotSender();...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.93.sol] 
PROCESSING MUTANT: 376:             if (vars.inAuction) revert AuctionActive();  ==>              /*if (vars.inAuction) revert AuctionActive();*/...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.94.sol] 
PROCESSING MUTANT: 383:             uint256 encumberedCollateral = borrower.t0Debt != 0 ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;  ==>              uint256 encumberedCollateral = borrower.t0Debt >= 0 ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.95.sol] 
PROCESSING MUTANT: 383:             uint256 encumberedCollateral = borrower.t0Debt != 0 ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;  ==>              uint256 encumberedCollateral = borrower.t0Debt > 0 ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.96.sol] 
PROCESSING MUTANT: 383:             uint256 encumberedCollateral = borrower.t0Debt != 0 ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;  ==>              uint256 encumberedCollateral = borrower.t0Debt != 1 ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.97.sol] 
PROCESSING MUTANT: 383:             uint256 encumberedCollateral = borrower.t0Debt != 0 ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;  ==>              uint256 encumberedCollateral = borrower.t0Debt != (0+1) ? Maths.wdiv(vars.borrowerDebt, result_.newLup) : 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.98.sol] 
PROCESSING MUTANT: 439:         Borrower memory borrower = loans_.borrowers[msg.sender];  ==>          Borrower storage borrower = loans_.borrowers[msg.sender];...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.99.sol] 
PROCESSING MUTANT: 446:                 Maths.wmul(borrower.t0Debt, poolState_.inflator), // current borrower debt  ==>                  Maths.wmul( poolState_.inflator,borrower.t0Debt), // current borrower debt...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.100.sol] 
PROCESSING MUTANT: 446:                 Maths.wmul(borrower.t0Debt, poolState_.inflator), // current borrower debt  ==>                  Maths.wmul(borrower.t0Debt, poolState_.inflator), //  borrower debt...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.101.sol] 
PROCESSING MUTANT: 463:             false,          // loan not in auction  ==>              true,          // loan not in auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.102.sol] 
PROCESSING MUTANT: 463:             false,          // loan not in auction  ==>              false,          //  not in auction...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.103.sol] 
PROCESSING MUTANT: 464:             true            // stamp Neutral Price of the loan  ==>              true            //  Neutral Price of the loan...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.104.sol] 
PROCESSING MUTANT: 483:     ) internal view returns (bool) {  ==>      ) internal  returns (bool) {...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.105.sol] 
PROCESSING MUTANT: 484:         return auctions_.liquidations[borrower_].kickTime != 0;  ==>          return auctions_.liquidations[borrower_].kickTime > 0;...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.106.sol] 
PROCESSING MUTANT: 490:     ) internal view returns (uint256) {  ==>      ) internal  returns (uint256) {...VALID [written to mutants/BorrowerActions/BorrowerActions.mutant.107.sol] 
108 VALID MUTANTS
2527 INVALID MUTANTS
0 REDUNDANT MUTANTS
Valid Percentage: 4.098671726755218%
